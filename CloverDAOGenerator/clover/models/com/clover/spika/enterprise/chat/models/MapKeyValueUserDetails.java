package com.clover.spika.enterprise.chat.models;

import com.clover.spika.enterprise.chat.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MAP_KEY_VALUE_USER_DETAILS.
 */
public class MapKeyValueUserDetails implements java.io.Serializable {

    private Long id;
    private String key;
    private String value;
    private long listId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MapKeyValueUserDetailsDao myDao;

    private ListUserDetails listUserDetails;
    private Long listUserDetails__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MapKeyValueUserDetails() {
    }

    public MapKeyValueUserDetails(Long id) {
        this.id = id;
    }

    public MapKeyValueUserDetails(Long id, String key, String value, long listId) {
        this.id = id;
        this.key = key;
        this.value = value;
        this.listId = listId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMapKeyValueUserDetailsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public long getListId() {
        return listId;
    }

    public void setListId(long listId) {
        this.listId = listId;
    }

    /** To-one relationship, resolved on first access. */
    public ListUserDetails getListUserDetails() {
        long __key = this.listId;
        if (listUserDetails__resolvedKey == null || !listUserDetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ListUserDetailsDao targetDao = daoSession.getListUserDetailsDao();
            ListUserDetails listUserDetailsNew = targetDao.load(__key);
            synchronized (this) {
                listUserDetails = listUserDetailsNew;
            	listUserDetails__resolvedKey = __key;
            }
        }
        return listUserDetails;
    }

    public void setListUserDetails(ListUserDetails listUserDetails) {
        if (listUserDetails == null) {
            throw new DaoException("To-one property 'listId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.listUserDetails = listUserDetails;
            listId = listUserDetails.getId();
            listUserDetails__resolvedKey = listId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
