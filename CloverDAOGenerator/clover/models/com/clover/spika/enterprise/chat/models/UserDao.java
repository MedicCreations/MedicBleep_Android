package com.clover.spika.enterprise.chat.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.clover.spika.enterprise.chat.models.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property User_id = new Property(1, Integer.class, "user_id", false, "USER_ID");
        public final static Property Firstname = new Property(2, String.class, "firstname", false, "FIRSTNAME");
        public final static Property Lastname = new Property(3, String.class, "lastname", false, "LASTNAME");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Image_thumb = new Property(6, String.class, "image_thumb", false, "IMAGE_THUMB");
        public final static Property Is_member = new Property(7, Boolean.class, "is_member", false, "IS_MEMBER");
        public final static Property Is_admin = new Property(8, Integer.class, "is_admin", false, "IS_ADMIN");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Groupname = new Property(10, String.class, "groupname", false, "GROUPNAME");
        public final static Property Chat_id = new Property(11, String.class, "chat_id", false, "CHAT_ID");
        public final static Property Is_user = new Property(12, Integer.class, "is_user", false, "IS_USER");
        public final static Property Is_group = new Property(13, Integer.class, "is_group", false, "IS_GROUP");
        public final static Property Is_room = new Property(14, Integer.class, "is_room", false, "IS_ROOM");
        public final static Property OrganizationId = new Property(15, Long.class, "organizationId", false, "ORGANIZATION_ID");
        public final static Property UserDetailsId = new Property(16, Long.class, "userDetailsId", false, "USER_DETAILS_ID");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "'USER_ID' INTEGER," + // 1: user_id
                "'FIRSTNAME' TEXT," + // 2: firstname
                "'LASTNAME' TEXT," + // 3: lastname
                "'TYPE' INTEGER," + // 4: type
                "'IMAGE' TEXT," + // 5: image
                "'IMAGE_THUMB' TEXT," + // 6: image_thumb
                "'IS_MEMBER' INTEGER," + // 7: is_member
                "'IS_ADMIN' INTEGER," + // 8: is_admin
                "'NAME' TEXT," + // 9: name
                "'GROUPNAME' TEXT," + // 10: groupname
                "'CHAT_ID' TEXT," + // 11: chat_id
                "'IS_USER' INTEGER," + // 12: is_user
                "'IS_GROUP' INTEGER," + // 13: is_group
                "'IS_ROOM' INTEGER," + // 14: is_room
                "'ORGANIZATION_ID' INTEGER," + // 15: organizationId
                "'USER_DETAILS_ID' INTEGER);"); // 16: userDetailsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(3, firstname);
        }
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(4, lastname);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String image_thumb = entity.getImage_thumb();
        if (image_thumb != null) {
            stmt.bindString(7, image_thumb);
        }
 
        Boolean is_member = entity.getIs_member();
        if (is_member != null) {
            stmt.bindLong(8, is_member ? 1l: 0l);
        }
 
        Integer is_admin = entity.getIs_admin();
        if (is_admin != null) {
            stmt.bindLong(9, is_admin);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(11, groupname);
        }
 
        String chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindString(12, chat_id);
        }
 
        Integer is_user = entity.getIs_user();
        if (is_user != null) {
            stmt.bindLong(13, is_user);
        }
 
        Integer is_group = entity.getIs_group();
        if (is_group != null) {
            stmt.bindLong(14, is_group);
        }
 
        Integer is_room = entity.getIs_room();
        if (is_room != null) {
            stmt.bindLong(15, is_room);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image_thumb
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // is_member
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // is_admin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // groupname
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // chat_id
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // is_user
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // is_group
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // is_room
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFirstname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage_thumb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_member(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIs_admin(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroupname(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChat_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_user(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIs_group(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIs_room(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrganizationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getListUserDetailsDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN ORGANIZATION T0 ON T.'ORGANIZATION_ID'=T0.'ID'");
            builder.append(" LEFT JOIN LIST_USER_DETAILS T1 ON T.'USER_DETAILS_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
        entity.setOrganization(organization);
        offset += daoSession.getOrganizationDao().getAllColumns().length;

        ListUserDetails listUserDetails = loadCurrentOther(daoSession.getListUserDetailsDao(), cursor, offset);
        entity.setListUserDetails(listUserDetails);

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
