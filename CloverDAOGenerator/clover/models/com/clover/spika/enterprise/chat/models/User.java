package com.clover.spika.enterprise.chat.models;

import com.clover.spika.enterprise.chat.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table USER.
 */
public class User implements java.io.Serializable {

    private int id;
    private Integer user_id;
    private String firstname;
    private String lastname;
    private Integer type;
    private String image;
    private String image_thumb;
    private Boolean is_member;
    private Integer is_admin;
    private String name;
    private String groupname;
    private String chat_id;
    private Integer is_user;
    private Integer is_group;
    private Integer is_room;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Organization organization;
    private Long organization__resolvedKey;

    private ListUserDetails listUserDetails;
    private Long listUserDetails__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(int id) {
        this.id = id;
    }

    public User(int id, Integer user_id, String firstname, String lastname, Integer type, String image, String image_thumb, Boolean is_member, Integer is_admin, String name, String groupname, String chat_id, Integer is_user, Integer is_group, Integer is_room) {
        this.id = id;
        this.user_id = user_id;
        this.firstname = firstname;
        this.lastname = lastname;
        this.type = type;
        this.image = image;
        this.image_thumb = image_thumb;
        this.is_member = is_member;
        this.is_admin = is_admin;
        this.name = name;
        this.groupname = groupname;
        this.chat_id = chat_id;
        this.is_user = is_user;
        this.is_group = is_group;
        this.is_room = is_room;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public Integer getUser_id() {
        return user_id;
    }

    public void setUser_id(Integer user_id) {
        this.user_id = user_id;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getImage_thumb() {
        return image_thumb;
    }

    public void setImage_thumb(String image_thumb) {
        this.image_thumb = image_thumb;
    }

    public Boolean getIs_member() {
        return is_member;
    }

    public void setIs_member(Boolean is_member) {
        this.is_member = is_member;
    }

    public Integer getIs_admin() {
        return is_admin;
    }

    public void setIs_admin(Integer is_admin) {
        this.is_admin = is_admin;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGroupname() {
        return groupname;
    }

    public void setGroupname(String groupname) {
        this.groupname = groupname;
    }

    public String getChat_id() {
        return chat_id;
    }

    public void setChat_id(String chat_id) {
        this.chat_id = chat_id;
    }

    public Integer getIs_user() {
        return is_user;
    }

    public void setIs_user(Integer is_user) {
        this.is_user = is_user;
    }

    public Integer getIs_group() {
        return is_group;
    }

    public void setIs_group(Integer is_group) {
        this.is_group = is_group;
    }

    public Integer getIs_room() {
        return is_room;
    }

    public void setIs_room(Integer is_room) {
        this.is_room = is_room;
    }

    /** To-one relationship, resolved on first access. */
    public Organization getOrganization() {
        Long __key = this.organizationId;
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            Organization organizationNew = targetDao.load(__key);
            synchronized (this) {
                organization = organizationNew;
            	organization__resolvedKey = __key;
            }
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        synchronized (this) {
            this.organization = organization;
            organizationId = organization == null ? null : organization.getId();
            organization__resolvedKey = organizationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ListUserDetails getListUserDetails() {
        Long __key = this.userDetailsId;
        if (listUserDetails__resolvedKey == null || !listUserDetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ListUserDetailsDao targetDao = daoSession.getListUserDetailsDao();
            ListUserDetails listUserDetailsNew = targetDao.load(__key);
            synchronized (this) {
                listUserDetails = listUserDetailsNew;
            	listUserDetails__resolvedKey = __key;
            }
        }
        return listUserDetails;
    }

    public void setListUserDetails(ListUserDetails listUserDetails) {
        synchronized (this) {
            this.listUserDetails = listUserDetails;
            userDetailsId = listUserDetails == null ? null : listUserDetails.getId();
            listUserDetails__resolvedKey = userDetailsId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
