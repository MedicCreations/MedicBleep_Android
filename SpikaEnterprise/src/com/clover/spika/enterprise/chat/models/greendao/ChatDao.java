package com.clover.spika.enterprise.chat.models.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.clover.spika.enterprise.chat.models.greendao.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT.
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Chat_id = new Property(1, Long.class, "chat_id", false, "CHAT_ID");
        public final static Property Chat_name = new Property(2, String.class, "chat_name", false, "CHAT_NAME");
        public final static Property Seen_by = new Property(3, String.class, "seen_by", false, "SEEN_BY");
        public final static Property Total_count = new Property(4, Integer.class, "total_count", false, "TOTAL_COUNT");
        public final static Property Image_thumb = new Property(5, String.class, "image_thumb", false, "IMAGE_THUMB");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property Admin_id = new Property(7, String.class, "admin_id", false, "ADMIN_ID");
        public final static Property Is_active = new Property(8, Integer.class, "is_active", false, "IS_ACTIVE");
        public final static Property Type = new Property(9, Integer.class, "type", false, "TYPE");
        public final static Property Is_private = new Property(10, Integer.class, "is_private", false, "IS_PRIVATE");
        public final static Property Password = new Property(11, String.class, "password", false, "PASSWORD");
        public final static Property Unread = new Property(12, String.class, "unread", false, "UNREAD");
        public final static Property Is_member = new Property(13, Integer.class, "is_member", false, "IS_MEMBER");
        public final static Property Modified = new Property(14, Long.class, "modified", false, "MODIFIED");
        public final static Property CategoryId = new Property(15, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property UserIdProperty = new Property(16, Long.class, "userIdProperty", false, "USER_ID_PROPERTY");
        public final static Property MessageIdProperty = new Property(17, Long.class, "messageIdProperty", false, "MESSAGE_ID_PROPERTY");
    };

    private DaoSession daoSession;


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "'CHAT_ID' INTEGER," + // 1: chat_id
                "'CHAT_NAME' TEXT," + // 2: chat_name
                "'SEEN_BY' TEXT," + // 3: seen_by
                "'TOTAL_COUNT' INTEGER," + // 4: total_count
                "'IMAGE_THUMB' TEXT," + // 5: image_thumb
                "'IMAGE' TEXT," + // 6: image
                "'ADMIN_ID' TEXT," + // 7: admin_id
                "'IS_ACTIVE' INTEGER," + // 8: is_active
                "'TYPE' INTEGER," + // 9: type
                "'IS_PRIVATE' INTEGER," + // 10: is_private
                "'PASSWORD' TEXT," + // 11: password
                "'UNREAD' TEXT," + // 12: unread
                "'IS_MEMBER' INTEGER," + // 13: is_member
                "'MODIFIED' INTEGER," + // 14: modified
                "'CATEGORY_ID' INTEGER," + // 15: categoryId
                "'USER_ID_PROPERTY' INTEGER," + // 16: userIdProperty
                "'MESSAGE_ID_PROPERTY' INTEGER);"); // 17: messageIdProperty
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindLong(2, chat_id);
        }
 
        String chat_name = entity.getChat_name();
        if (chat_name != null) {
            stmt.bindString(3, chat_name);
        }
 
        String seen_by = entity.getSeen_by();
        if (seen_by != null) {
            stmt.bindString(4, seen_by);
        }
 
        Integer total_count = entity.getTotal_count();
        if (total_count != null) {
            stmt.bindLong(5, total_count);
        }
 
        String image_thumb = entity.getImage_thumb();
        if (image_thumb != null) {
            stmt.bindString(6, image_thumb);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String admin_id = entity.getAdmin_id();
        if (admin_id != null) {
            stmt.bindString(8, admin_id);
        }
 
        Integer is_active = entity.getIs_active();
        if (is_active != null) {
            stmt.bindLong(9, is_active);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        Integer is_private = entity.getIs_private();
        if (is_private != null) {
            stmt.bindLong(11, is_private);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
 
        String unread = entity.getUnread();
        if (unread != null) {
            stmt.bindString(13, unread);
        }
 
        Integer is_member = entity.getIs_member();
        if (is_member != null) {
            stmt.bindLong(14, is_member);
        }
 
        Long modified = entity.getModified();
        if (modified != null) {
            stmt.bindLong(15, modified);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(16, categoryId);
        }
 
        Long userIdProperty = entity.getUserIdProperty();
        if (userIdProperty != null) {
            stmt.bindLong(17, userIdProperty);
        }
 
        Long messageIdProperty = entity.getMessageIdProperty();
        if (messageIdProperty != null) {
            stmt.bindLong(18, messageIdProperty);
        }
    }

    @Override
    protected void attachEntity(Chat entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // chat_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chat_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // seen_by
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // total_count
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image_thumb
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // admin_id
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // is_active
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // is_private
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // password
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // unread
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // is_member
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // modified
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // categoryId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // userIdProperty
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // messageIdProperty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setChat_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setChat_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSeen_by(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotal_count(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImage_thumb(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdmin_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_active(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIs_private(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPassword(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnread(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIs_member(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setModified(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setCategoryId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setUserIdProperty(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setMessageIdProperty(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMessageDao().getAllColumns());
            builder.append(" FROM CHAT T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATEGORY_ID'=T0.'ID'");
            builder.append(" LEFT JOIN USER T1 ON T.'USER_ID_PROPERTY'=T1.'ID'");
            builder.append(" LEFT JOIN MESSAGE T2 ON T.'MESSAGE_ID_PROPERTY'=T2.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Chat loadCurrentDeep(Cursor cursor, boolean lock) {
        Chat entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        Message message = loadCurrentOther(daoSession.getMessageDao(), cursor, offset);
        entity.setMessage(message);

        return entity;    
    }

    public Chat loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Chat> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Chat> list = new ArrayList<Chat>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Chat> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Chat> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
