package com.clover.spika.enterprise.chat.models.greendao;

import java.util.List;
import com.clover.spika.enterprise.chat.models.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CHAT.
 */
public class Chat {

    private long id;
    private Long chat_id;
    private String chat_name;
    private String seen_by;
    private Integer total_count;
    private String image_thumb;
    private String image;
    private String admin_id;
    private Integer is_active;
    private Integer type;
    private Integer is_private;
    private String password;
    private String unread;
    private Integer is_member;
    private Long modified;
    private Boolean isRecent;
    private Long categoryId;
    private Long userIdProperty;
    private Long messageIdProperty;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChatDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private User user;
    private Long user__resolvedKey;

    private Message message;
    private Long message__resolvedKey;

    private List<Message> messageList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Chat() {
    }

    public Chat(long id) {
        this.id = id;
    }

    public Chat(long id, Long chat_id, String chat_name, String seen_by, Integer total_count, String image_thumb, String image, String admin_id, Integer is_active, Integer type, Integer is_private, String password, String unread, Integer is_member, Long modified, Boolean isRecent, Long categoryId, Long userIdProperty, Long messageIdProperty) {
        this.id = id;
        this.chat_id = chat_id;
        this.chat_name = chat_name;
        this.seen_by = seen_by;
        this.total_count = total_count;
        this.image_thumb = image_thumb;
        this.image = image;
        this.admin_id = admin_id;
        this.is_active = is_active;
        this.type = type;
        this.is_private = is_private;
        this.password = password;
        this.unread = unread;
        this.is_member = is_member;
        this.modified = modified;
        this.isRecent = isRecent;
        this.categoryId = categoryId;
        this.userIdProperty = userIdProperty;
        this.messageIdProperty = messageIdProperty;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getChat_id() {
        return chat_id;
    }

    public void setChat_id(Long chat_id) {
        this.chat_id = chat_id;
    }

    public String getChat_name() {
        return chat_name;
    }

    public void setChat_name(String chat_name) {
        this.chat_name = chat_name;
    }

    public String getSeen_by() {
        return seen_by;
    }

    public void setSeen_by(String seen_by) {
        this.seen_by = seen_by;
    }

    public Integer getTotal_count() {
        return total_count;
    }

    public void setTotal_count(Integer total_count) {
        this.total_count = total_count;
    }

    public String getImage_thumb() {
        return image_thumb;
    }

    public void setImage_thumb(String image_thumb) {
        this.image_thumb = image_thumb;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getAdmin_id() {
        return admin_id;
    }

    public void setAdmin_id(String admin_id) {
        this.admin_id = admin_id;
    }

    public Integer getIs_active() {
        return is_active;
    }

    public void setIs_active(Integer is_active) {
        this.is_active = is_active;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getIs_private() {
        return is_private;
    }

    public void setIs_private(Integer is_private) {
        this.is_private = is_private;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUnread() {
        return unread;
    }

    public void setUnread(String unread) {
        this.unread = unread;
    }

    public Integer getIs_member() {
        return is_member;
    }

    public void setIs_member(Integer is_member) {
        this.is_member = is_member;
    }

    public Long getModified() {
        return modified;
    }

    public void setModified(Long modified) {
        this.modified = modified;
    }

    public Boolean getIsRecent() {
        return isRecent;
    }

    public void setIsRecent(Boolean isRecent) {
        this.isRecent = isRecent;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getUserIdProperty() {
        return userIdProperty;
    }

    public void setUserIdProperty(Long userIdProperty) {
        this.userIdProperty = userIdProperty;
    }

    public Long getMessageIdProperty() {
        return messageIdProperty;
    }

    public void setMessageIdProperty(Long messageIdProperty) {
        this.messageIdProperty = messageIdProperty;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userIdProperty;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userIdProperty = user == null ? null : user.getId();
            user__resolvedKey = userIdProperty;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Message getMessage() {
        Long __key = this.messageIdProperty;
        if (message__resolvedKey == null || !message__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            Message messageNew = targetDao.load(__key);
            synchronized (this) {
                message = messageNew;
            	message__resolvedKey = __key;
            }
        }
        return message;
    }

    public void setMessage(Message message) {
        synchronized (this) {
            this.message = message;
            messageIdProperty = message == null ? null : message.getId();
            message__resolvedKey = messageIdProperty;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getMessageList() {
        if (messageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messageListNew = targetDao._queryChat_MessageList(id);
            synchronized (this) {
                if(messageList == null) {
                    messageList = messageListNew;
                }
            }
        }
        return messageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessageList() {
        messageList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
